Kernel command line: -q -f put fork-multiple run fork-multiple
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  157,081,600 loops/s.
hd0:0: detected 313 sector (156 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 104 sector (52 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'fork-multiple' into the file system...
Executing 'fork-multiple':
(fork-multiple) begin
(fork-multiple) child run
child: exit(4)
(fork-multiple) Parent: child exit status is 4
(fork-multiple) child run
child: exit(5)
Interrupt 0x0d (#GP General Protection Exception) at rip=8004207f36
 cr2=0000000000000000 error=               0
rax cccccccccccccbe4 rbx 0000000000000000 rcx 00000000004034f2 rdx 0000000000000020
rsp 0000008004240e90 rbp 0000008004240eb0 rsi 0000000000000000 rdi 00000080042400f8
rip 0000008004207f36 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000216 r12 000000800421cc8f r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000286
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:97 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x8004217f0b 0x800421ca64 0x8004208e6e 0x800420928c 0x800421baae 0x800421d071 0x800421cd72 0x800421cbb8 0x40013b 0x4001b3 0x400229 0x400cca.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 62 ticks
Thread: 29 idle ticks, 30 kernel ticks, 3 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 87 reads, 236 writes
hd1:0: 104 reads, 0 writes
Console: 1848 characters output
Key